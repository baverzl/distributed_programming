#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#define ELEM_PER_PROC 1

int *create_rand_nums(int size)
{
    int i;
    assert(size > 0);
    int *p = malloc(sizeof(int) * size);
    assert(p != NULL);
    for(i = 0; i < size; i++)
        p[i] = rand() % 100;
    return p;
}
int collapse(int n)
{
    int sum;
    while(1) {
        sum = 0;
        int count = 0;
        while(n) {
            sum += n % 10;
            n /= 10;
            count++;
        }
        if(count == 1)
            break;
        n = sum;
    }
    return sum;
}

int main(int argc, char *argv[])
{
    int rank, size, i;

    MPI_Init(&argc, &argv);

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int *rand_nums;
    if(rank == 0) {
        rand_nums = create_rand_nums(ELEM_PER_PROC * size);
        printf("random numbers: ");
        for(i = 0; i < ELEM_PER_PROC * size; i++)
            printf("%d ", rand_nums[i]);
        printf("\n");
    }

    int *sub_rand_nums = (int *) malloc(sizeof(int) * ELEM_PER_PROC);
    assert(sub_rand_nums != NULL);

    MPI_Scatter(rand_nums, ELEM_PER_PROC, MPI_INT, 
            sub_rand_nums, ELEM_PER_PROC, MPI_INT,
            0, MPI_COMM_WORLD);

    int local_sum = 0;
    for(i = 0; i < ELEM_PER_PROC; i++)
        local_sum += sub_rand_nums[i];

    int *local_sums = (int *) malloc(sizeof(int) * size);
    MPI_Gather(&local_sum, 1, MPI_INT, local_sums, size, MPI_INT, 0, MPI_COMM_WORLD);

    if(rank == 0) {
        int global_sum = 0;
        for(i = 0; i < size; i++)
            global_sum += local_sums[i];

        printf("global sum : %d\n", collapse(global_sum));
    }

    MPI_Finalize();

    return 0;
}
